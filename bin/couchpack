#!/usr/bin/env ruby

require "rubygems"
require 'optparse'
require "json"
require "fileutils"


begin
  # Save ARGV in case someone wants to use it later
  ORIGINAL_ARGV = ARGV.dup

  options = {:hostname => "localhost", :port => 5984, :db => "couchapp"}

  opts = OptionParser.new do |opts|
    opts.banner = <<-EOF
  Usage:
    Starting:
      couchpack [-h <hostname>] [-p <port>] [-d <database>] [-a <document>] [-o <outfile filename>]
      
    Options:
  EOF
  
    
    opts.on("-hHOSTNAME", "--hostname HOSTNAME", "Hostname of the CouchDB server") do |x|
      options[:hostname] = x
    end
    
    opts.on("-pPORT", "--port PORT", "Port of the CouchDB server") do |x|
      options[:port] = x
    end
    
    opts.on("-dDB", "--database DB", "Couch document database name on the CouchDB server") do |x|
      options[:db] = x
    end

    opts.on("-aDOC", "--adocument DOC", "Couch document name on the CouchDB server") do |x|
      options[:doc] = x
    end
    
    opts.on("-oOUTFILE", "--outfile OUTFILE", "Path of the output file") do |x|
      options[:outfile] = x
    end
    
  end
  
  opts.parse!
  
  puts "CouchPack options: #{options.inspect}"
  
rescue => err

end

# default is using the database name for the document
if options[:doc].nil?
   options[:doc] = options[:db]
end

# default is using the document name for the output file
if options[:outfile].nil?
   options[:outfile] = options[:db]
end
options[:outfile] = options[:outfile].gsub("//", "")

tmp_file = "/tmp/couchpack-#{options[:db]}-#{Time.now.to_i}.json"
cmd = "curl -o #{tmp_file} \"http://#{options[:hostname]}:#{options[:port]}/#{options[:db]}/#{options[:doc]}?attachments=true\""

puts "CMD : #{cmd}"

`#{cmd}`

json = JSON.parse(open(tmp_file).read)

error = json["error"]

# success
if error.nil?
  version = json["_rev"]

  json.delete("_rev")
  json.delete("_id")

  f = open(options[:outfile] + ".json", "w")
  f.write(json.to_json)
  f.close

  f = open(options[:outfile] + ".version", "w")
  f.write(version)
  f.close

  puts "Success: created bundled document: #{options[:outfile]}.json and version file: #{options[:outfile]}.version."
  puts "Don't forget to add them as a resource to your project!"
# failure
else
  puts "Failed: couch responded with: #{json.inspect}"
end

FileUtils.rm(tmp_file)